//This program will reverse a String using Loops/Recursion/Stack/Queue and verify weather its Palindrome
package com.iad.hc.pcs.pages;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class Codility {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter a String");
		String str = sc.nextLine();
		
		int len=str.length();
		System.out.println("Length of String: " + len);
		
		String revString = doRev(str);
		System.out.println("Reversed String is: " + revString);
		
		if(str.equalsIgnoreCase(revString))
			System.out.println("Given string is Palindrome");
		else
			System.out.println("Given String is not Palindrome");
		
		sc.close();
		

	}
	public static String doRev(String input)
	{
		String output = "";
		int size=input.length();
		
		/*
		Stack st = new Stack();
		char[] ch=input.toCharArray();
				
		for(int i=0;i<size;i++)
		{
			st.push(ch[i]);
		}
		
		while(!st.isEmpty())
		{
			output = output + st.pop();			
		}
		*/
		
		/*
		Queue qe = new LinkedList<>();
		char[] ch=input.toCharArray();
		
		for(int i=size-1;i>=0;i--)
		{
			qe.add(ch[i]);
		}
		
		while(!qe.isEmpty())
		{
			output+= qe.remove();
		}
		*/
		/*
		for(int i=size-1;i>=0;i--)
		{
			output=output + input.charAt(i);
		}
		*/
		
		if(input.isEmpty())
		{
			return input;
		}
		
		return doRev(input.substring(1))+ input.charAt(0);
	}

}
